// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class mintSoulLoot extends ethereum.Event {
  get params(): mintSoulLoot__Params {
    return new mintSoulLoot__Params(this);
  }
}

export class mintSoulLoot__Params {
  _event: mintSoulLoot;

  constructor(event: mintSoulLoot) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get rTokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SOUL_LOOT__getAdventureRecordResultValue0Struct extends ethereum.Tuple {
  get inputData(): SOUL_LOOT__getAdventureRecordResultValue0InputDataStruct {
    return changetype<SOUL_LOOT__getAdventureRecordResultValue0InputDataStruct>(
      this[0].toTuple(),
    );
  }

  get turn(): i32 {
    return this[1].toI32();
  }

  get maxHp(): i32 {
    return this[2].toI32();
  }

  get currentHp(): i32 {
    return this[3].toI32();
  }

  get attack(): i32 {
    return this[4].toI32();
  }

  get defence(): i32 {
    return this[5].toI32();
  }

  get recovery(): i32 {
    return this[6].toI32();
  }

  get stats(): Array<i32> {
    return this[7].toI32Array();
  }

  get unique(): Array<i32> {
    return this[8].toI32Array();
  }

  get weapon(): BigInt {
    return this[9].toBigInt();
  }

  get chestArmor(): BigInt {
    return this[10].toBigInt();
  }

  get headArmor(): BigInt {
    return this[11].toBigInt();
  }

  get waistArmor(): BigInt {
    return this[12].toBigInt();
  }

  get footArmor(): BigInt {
    return this[13].toBigInt();
  }

  get handArmor(): BigInt {
    return this[14].toBigInt();
  }

  get necklace(): BigInt {
    return this[15].toBigInt();
  }

  get ring(): BigInt {
    return this[16].toBigInt();
  }

  get relics(): Array<BigInt> {
    return this[17].toBigIntArray();
  }
}

export class SOUL_LOOT__getAdventureRecordResultValue0InputDataStruct extends ethereum.Tuple {
  get seed(): BigInt {
    return this[0].toBigInt();
  }

  get directions(): Array<i32> {
    return this[1].toI32Array();
  }

  get useItems(): Array<i32> {
    return this[2].toI32Array();
  }
}

export class SOUL_LOOT extends ethereum.SmartContract {
  static bind(address: Address): SOUL_LOOT {
    return new SOUL_LOOT("SOUL_LOOT", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEVELOPER_ROLE(): Bytes {
    let result = super.call("DEVELOPER_ROLE", "DEVELOPER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEVELOPER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEVELOPER_ROLE",
      "DEVELOPER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAdventureRecord(
    tokenId_: BigInt,
  ): SOUL_LOOT__getAdventureRecordResultValue0Struct {
    let result = super.call(
      "getAdventureRecord",
      "getAdventureRecord(uint256):(((uint256,uint8[],uint8[]),uint16,uint16,uint16,uint16,uint16,uint16,uint16[6],uint8[4],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)],
    );

    return changetype<SOUL_LOOT__getAdventureRecordResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getAdventureRecord(
    tokenId_: BigInt,
  ): ethereum.CallResult<SOUL_LOOT__getAdventureRecordResultValue0Struct> {
    let result = super.tryCall(
      "getAdventureRecord",
      "getAdventureRecord(uint256):(((uint256,uint8[],uint8[]),uint16,uint16,uint16,uint16,uint16,uint16,uint16[6],uint8[4],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SOUL_LOOT__getAdventureRecordResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAttack(tokenId_: BigInt): i32 {
    let result = super.call("getAttack", "getAttack(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toI32();
  }

  try_getAttack(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getAttack", "getAttack(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getChest(tokenId_: BigInt): string {
    let result = super.call("getChest", "getChest(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getChest(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getChest", "getChest(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCurrentHp(tokenId_: BigInt): i32 {
    let result = super.call("getCurrentHp", "getCurrentHp(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toI32();
  }

  try_getCurrentHp(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentHp",
      "getCurrentHp(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDefence(tokenId_: BigInt): i32 {
    let result = super.call("getDefence", "getDefence(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toI32();
  }

  try_getDefence(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getDefence", "getDefence(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getFoot(tokenId_: BigInt): string {
    let result = super.call("getFoot", "getFoot(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getFoot(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getFoot", "getFoot(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getHand(tokenId_: BigInt): string {
    let result = super.call("getHand", "getHand(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getHand(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getHand", "getHand(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getHead(tokenId_: BigInt): string {
    let result = super.call("getHead", "getHead(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getHead(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getHead", "getHead(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getMaxHp(tokenId_: BigInt): i32 {
    let result = super.call("getMaxHp", "getMaxHp(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toI32();
  }

  try_getMaxHp(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getMaxHp", "getMaxHp(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getNeck(tokenId_: BigInt): string {
    let result = super.call("getNeck", "getNeck(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getNeck(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getNeck", "getNeck(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRAddress(tokenId_: BigInt): Address {
    let result = super.call("getRAddress", "getRAddress(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toAddress();
  }

  try_getRAddress(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRAddress",
      "getRAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRTokenId(tokenId_: BigInt): BigInt {
    let result = super.call("getRTokenId", "getRTokenId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toBigInt();
  }

  try_getRTokenId(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRTokenId",
      "getRTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecovery(tokenId_: BigInt): i32 {
    let result = super.call("getRecovery", "getRecovery(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toI32();
  }

  try_getRecovery(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getRecovery", "getRecovery(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRing(tokenId_: BigInt): string {
    let result = super.call("getRing", "getRing(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getRing(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getRing", "getRing(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSeed(tokenId_: BigInt): BigInt {
    let result = super.call("getSeed", "getSeed(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toBigInt();
  }

  try_getSeed(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSeed", "getSeed(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTurn(tokenId_: BigInt): i32 {
    let result = super.call("getTurn", "getTurn(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toI32();
  }

  try_getTurn(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getTurn", "getTurn(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getWaist(tokenId_: BigInt): string {
    let result = super.call("getWaist", "getWaist(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getWaist(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getWaist", "getWaist(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getWeapon(tokenId_: BigInt): string {
    let result = super.call("getWeapon", "getWeapon(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_getWeapon(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getWeapon", "getWeapon(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId_: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURIfromRLoot(nft_: Address, tokenId_: BigInt): string {
    let result = super.call(
      "tokenURIfromRLoot",
      "tokenURIfromRLoot(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(nft_),
        ethereum.Value.fromUnsignedBigInt(tokenId_),
      ],
    );

    return result[0].toString();
  }

  try_tokenURIfromRLoot(
    nft_: Address,
    tokenId_: BigInt,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenURIfromRLoot",
      "tokenURIfromRLoot(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(nft_),
        ethereum.Value.fromUnsignedBigInt(tokenId_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get uriPrefic_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uriSuffix_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get nft_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseMetadataURICall extends ethereum.Call {
  get inputs(): SetBaseMetadataURICall__Inputs {
    return new SetBaseMetadataURICall__Inputs(this);
  }

  get outputs(): SetBaseMetadataURICall__Outputs {
    return new SetBaseMetadataURICall__Outputs(this);
  }
}

export class SetBaseMetadataURICall__Inputs {
  _call: SetBaseMetadataURICall;

  constructor(call: SetBaseMetadataURICall) {
    this._call = call;
  }

  get uriPrefix_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uriSuffix_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetBaseMetadataURICall__Outputs {
  _call: SetBaseMetadataURICall;

  constructor(call: SetBaseMetadataURICall) {
    this._call = call;
  }
}

export class SetDeveloperRoleCall extends ethereum.Call {
  get inputs(): SetDeveloperRoleCall__Inputs {
    return new SetDeveloperRoleCall__Inputs(this);
  }

  get outputs(): SetDeveloperRoleCall__Outputs {
    return new SetDeveloperRoleCall__Outputs(this);
  }
}

export class SetDeveloperRoleCall__Inputs {
  _call: SetDeveloperRoleCall;

  constructor(call: SetDeveloperRoleCall) {
    this._call = call;
  }

  get granted_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDeveloperRoleCall__Outputs {
  _call: SetDeveloperRoleCall;

  constructor(call: SetDeveloperRoleCall) {
    this._call = call;
  }
}

export class SetMinterRoleCall extends ethereum.Call {
  get inputs(): SetMinterRoleCall__Inputs {
    return new SetMinterRoleCall__Inputs(this);
  }

  get outputs(): SetMinterRoleCall__Outputs {
    return new SetMinterRoleCall__Outputs(this);
  }
}

export class SetMinterRoleCall__Inputs {
  _call: SetMinterRoleCall;

  constructor(call: SetMinterRoleCall) {
    this._call = call;
  }

  get granted_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMinterRoleCall__Outputs {
  _call: SetMinterRoleCall;

  constructor(call: SetMinterRoleCall) {
    this._call = call;
  }
}

export class SetNftIdCall extends ethereum.Call {
  get inputs(): SetNftIdCall__Inputs {
    return new SetNftIdCall__Inputs(this);
  }

  get outputs(): SetNftIdCall__Outputs {
    return new SetNftIdCall__Outputs(this);
  }
}

export class SetNftIdCall__Inputs {
  _call: SetNftIdCall;

  constructor(call: SetNftIdCall) {
    this._call = call;
  }

  get nft_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftIdCall__Outputs {
  _call: SetNftIdCall;

  constructor(call: SetNftIdCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
