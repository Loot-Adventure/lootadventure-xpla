/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISoulMinterInterface extends utils.Interface {
  functions: {
    "getArmourNftAddress()": FunctionFragment;
    "getCalcContract(address)": FunctionFragment;
    "getItemNftAddress()": FunctionFragment;
    "getJobNftAddress()": FunctionFragment;
    "getSoulNftAddress()": FunctionFragment;
    "mintSoul(address,uint256,address,address,bytes)": FunctionFragment;
    "setArmourNftAddress(address)": FunctionFragment;
    "setCalcContract(address,address)": FunctionFragment;
    "setItemNftAddress(address)": FunctionFragment;
    "setJobNftAddress(address)": FunctionFragment;
    "setSoulNftAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getArmourNftAddress"
      | "getCalcContract"
      | "getItemNftAddress"
      | "getJobNftAddress"
      | "getSoulNftAddress"
      | "mintSoul"
      | "setArmourNftAddress"
      | "setCalcContract"
      | "setItemNftAddress"
      | "setJobNftAddress"
      | "setSoulNftAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getArmourNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCalcContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJobNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSoulNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintSoul",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setArmourNftAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCalcContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemNftAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobNftAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSoulNftAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getArmourNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCalcContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoulNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintSoul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setArmourNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCalcContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSoulNftAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISoulMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoulMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getArmourNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getCalcContract(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getItemNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getJobNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getSoulNftAddress(overrides?: CallOverrides): Promise<[string]>;

    mintSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArmourNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCalcContract(
      nft_: PromiseOrValue<string>,
      calc_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setItemNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setJobNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSoulNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getArmourNftAddress(overrides?: CallOverrides): Promise<string>;

  getCalcContract(
    nft_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getItemNftAddress(overrides?: CallOverrides): Promise<string>;

  getJobNftAddress(overrides?: CallOverrides): Promise<string>;

  getSoulNftAddress(overrides?: CallOverrides): Promise<string>;

  mintSoul(
    nft_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    seedData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArmourNftAddress(
    nft_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCalcContract(
    nft_: PromiseOrValue<string>,
    calc_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setItemNftAddress(
    nft_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setJobNftAddress(
    nft_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSoulNftAddress(
    nft_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getArmourNftAddress(overrides?: CallOverrides): Promise<string>;

    getCalcContract(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getItemNftAddress(overrides?: CallOverrides): Promise<string>;

    getJobNftAddress(overrides?: CallOverrides): Promise<string>;

    getSoulNftAddress(overrides?: CallOverrides): Promise<string>;

    mintSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setArmourNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCalcContract(
      nft_: PromiseOrValue<string>,
      calc_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setItemNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setJobNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSoulNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getArmourNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCalcContract(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getJobNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSoulNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    mintSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArmourNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCalcContract(
      nft_: PromiseOrValue<string>,
      calc_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setItemNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setJobNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSoulNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getArmourNftAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCalcContract(
      nft_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJobNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSoulNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArmourNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCalcContract(
      nft_: PromiseOrValue<string>,
      calc_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setItemNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setJobNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSoulNftAddress(
      nft_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
