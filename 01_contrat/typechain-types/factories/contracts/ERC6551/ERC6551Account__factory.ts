/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC6551Account,
  ERC6551AccountInterface,
} from "../../../contracts/ERC6551/ERC6551Account";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeCall",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610812908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c90816301ffc9a71461007e575080631626ba7e146100795780638da5cb5b146100745780639e5d4c491461006f578063affed0e01461006a5763fc0c546a0361000e57610308565b6102ea565b61027b565b6101e9565b61014c565b346100d45760203660031901126100d4576004359063ffffffff60e01b82168092036100d457506301ffc9a760e01b81149081156100c3575b50151560805260206080f35b630801407360e31b149050816100b7565b80fd5b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761010957604052565b6100d7565b90601f8019910116810190811067ffffffffffffffff82111761010957604052565b67ffffffffffffffff811161010957601f01601f191660200190565b346101e45760403660031901126101e45760243567ffffffffffffffff81116101e457366023820112156101e45780600401359061018982610130565b610196604051918261010e565b82815236602484840101116101e45760006020846101e09560246101c59601838601378301015260043561057d565b6040516001600160e01b031990911681529081906020820190565b0390f35b600080fd5b346101e45760003660031901126101e45760206102046104ac565b6040516001600160a01b039091168152f35b6001600160a01b038116036101e457565b919082519283825260005b848110610253575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610232565b906020610278928181520190610227565b90565b60603660031901126101e45760043561029381610216565b60443567ffffffffffffffff8082116101e457366023830112156101e45781600401359081116101e45736602482840101116101e4576101e09260246102de930190602435906103d4565b60405191829182610267565b346101e45760003660031901126101e4576020600054604051908152f35b346101e45760003660031901126101e457303b605f1981019080821161037657610332913061073c565b6060818051810103126101e45760208101516040820151606092839061035783610216565b0151604080519384526001600160a01b03909216602084015290820152f35b6103be565b60405190610388826100ed565b60008252565b3d156103b9573d9061039f82610130565b916103ad604051938461010e565b82523d6000602084013e565b606090565b634e487b7160e01b600052601160045260246000fd5b90926001600160a01b036103e66104ac565b163303610430576000938493826040519384928337810185815203925af19061040d61038e565b911561042757600054600019811461037657600101600055565b50602081519101fd5b60405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606490fd5b908160609103126101e4578051916040602083015161048581610216565b92015190565b6040513d6000823e3d90fd5b908160209103126101e4575161027881610216565b604051637e062a3560e11b8152606081600481305afa90811561053f5760008091819361054b575b504603610544576040516331a9108f60e11b81526004810192909252602090829060249082906001600160a01b03165afa90811561053f57600091610517575090565b610278915060203d8111610538575b610530818361010e565b810190610497565b503d610526565b61048b565b5050600090565b91505061056f915060603d8111610576575b610567818361010e565b810190610467565b91386104d4565b503d61055d565b6105856104ac565b61058f8383610682565b600581959295101561066c57159384610656575b5083156105c2575b5050506105b757600090565b630b135d3f60e11b90565b6000929350908291604051610609816105fb6020820194630b135d3f60e11b998a87526024840152604060448401526064830190610227565b03601f19810183528261010e565b51915afa9061061661038e565b82610648575b8261062c575b50503880806105ab565b9091506020818051810103126101e45760200151143880610622565b91506020825110159161061c565b6001600160a01b038381169116149350386105a3565b634e487b7160e01b600052602160045260246000fd5b9060418151146000146106b0576106ac916020820151906060604084015193015160001a906106ba565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116107305791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561053f5781516001600160a01b0381161561072a579190565b50600190565b50505050600090600390565b9291833b9081156107c4578183116107b75782811061078d57828091039103908082106000146107855750905b60405193601f19603f840116850160405282855260208501903c565b905090610769565b60405163162544fd60e11b8152600481019290925260248201929092526044810191909152606490fd5b505050905061027861037b565b50505090506040516107d5816100ed565b600081529056fea2646970667358221220c8466d6f0be5a709eebca593f58e4852e940f6d07bdaeda6f98bb2f3d8cbfa3d64736f6c63430008130033";

type ERC6551AccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC6551AccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC6551Account__factory extends ContractFactory {
  constructor(...args: ERC6551AccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC6551Account> {
    return super.deploy(overrides || {}) as Promise<ERC6551Account>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC6551Account {
    return super.attach(address) as ERC6551Account;
  }
  override connect(signer: Signer): ERC6551Account__factory {
    return super.connect(signer) as ERC6551Account__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC6551AccountInterface {
    return new utils.Interface(_abi) as ERC6551AccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC6551Account {
    return new Contract(address, _abi, signerOrProvider) as ERC6551Account;
  }
}
