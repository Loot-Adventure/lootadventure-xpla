/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISoulCalculatorInterface extends utils.Interface {
  functions: {
    "calcArtifact(address,uint256,bytes)": FunctionFragment;
    "calcEquipment(address,uint256,bytes)": FunctionFragment;
    "calcJob(address,uint256,bytes)": FunctionFragment;
    "calcSoul(address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcArtifact"
      | "calcEquipment"
      | "calcJob"
      | "calcSoul"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcArtifact",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcEquipment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcJob",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSoul",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcSoul", data: BytesLike): Result;

  events: {};
}

export interface ISoulCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoulCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcArtifact(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _seed: BigNumber;
        _artifactType: BigNumber;
        _rarity: BigNumber;
      }
    >;

    calcEquipment(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], string[], BigNumber[]] & {
        _seed: BigNumber;
        _equipmentIds: BigNumber[];
        _equipmentNames: string[];
        _equipmentRarities: BigNumber[];
      }
    >;

    calcJob(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _seed: BigNumber; _jobType: BigNumber }
    >;

    calcSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, number] & {
        _seed: BigNumber;
        _turn: number;
        _maxHp: number;
        _currentHp: number;
        _attack: number;
        _defence: number;
        _recovery: number;
      }
    >;
  };

  calcArtifact(
    nft_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    seedData_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _seed: BigNumber;
      _artifactType: BigNumber;
      _rarity: BigNumber;
    }
  >;

  calcEquipment(
    nft_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    seedData_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], string[], BigNumber[]] & {
      _seed: BigNumber;
      _equipmentIds: BigNumber[];
      _equipmentNames: string[];
      _equipmentRarities: BigNumber[];
    }
  >;

  calcJob(
    nft_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    seedData_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _seed: BigNumber; _jobType: BigNumber }
  >;

  calcSoul(
    nft_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    seedData_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, number] & {
      _seed: BigNumber;
      _turn: number;
      _maxHp: number;
      _currentHp: number;
      _attack: number;
      _defence: number;
      _recovery: number;
    }
  >;

  callStatic: {
    calcArtifact(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _seed: BigNumber;
        _artifactType: BigNumber;
        _rarity: BigNumber;
      }
    >;

    calcEquipment(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], string[], BigNumber[]] & {
        _seed: BigNumber;
        _equipmentIds: BigNumber[];
        _equipmentNames: string[];
        _equipmentRarities: BigNumber[];
      }
    >;

    calcJob(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _seed: BigNumber; _jobType: BigNumber }
    >;

    calcSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, number] & {
        _seed: BigNumber;
        _turn: number;
        _maxHp: number;
        _currentHp: number;
        _attack: number;
        _defence: number;
        _recovery: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    calcArtifact(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcEquipment(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcJob(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcArtifact(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcEquipment(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcJob(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSoul(
      nft_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      seedData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
