/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Bytecode,
  BytecodeInterface,
} from "../../../contracts/lib/Bytecode";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212206eb9e56d554a767037dff6cd20107f80227ba16163e3f28b225daf275864800964736f6c63430008130033";

type BytecodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BytecodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytecode__factory extends ContractFactory {
  constructor(...args: BytecodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Bytecode> {
    return super.deploy(overrides || {}) as Promise<Bytecode>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytecode {
    return super.attach(address) as Bytecode;
  }
  override connect(signer: Signer): Bytecode__factory {
    return super.connect(signer) as Bytecode__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BytecodeInterface {
    return new utils.Interface(_abi) as BytecodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bytecode {
    return new Contract(address, _abi, signerOrProvider) as Bytecode;
  }
}
